###############################################################################
#                                                                             #
#             General Makefile for C++ Projects with Unit Tests               #
#           Copyright (C) 2014 Grant Ayers <ayers@cs.stanford.edu>            #
#           Hosted at GitHub: https://github.com/grantea/makefiles            #
#                                                                             #
# This file is free software distributed under the BSD license. See LICENSE   #
# for more information.                                                       #
#                                                                             #
# This is a single-target, general-purpose Makefile for C++ projects which    #
# supports unit testing using the googletest (gtest) framework. It is         #
# for use with GNU Make and GCC, but may work with other software with little #
# or no modification.                                                         #
#                                                                             #
# Set the program name, source root, and any desired options and compiler     #
# flags. For unit testing, specify the unit test identifier which is a file   #
# name suffix that identifies unit tests. For example, if this is 'Test' then #
# source files 'car.cc' and 'animal.cc' would have unit tests called          #
# 'carTest.cc' and 'animalTest.cc', respectively. To exclude any files from   #
# unit tests, set 'TEST_EXCLUDE' (e.g. 'main' to exclude main.cc, etc.).      #
#                                                                             #
# Type 'make' to build, and 'make test' to test. All dependencies (including  #
# header file changes) will be handled automatically.                         #
#                                                                             #
# Usage:                                                                      #
#                                                                             #
#   make all    Build the application (excluding unit tests)                  #
#                                                                             #
#   make test       Build and run all unit tests. Depends on gmock, which     #
#                   will be downloaded and compiled the first time running    #
#                   this target.                                              #
#   make clean      Clean all build output.                                   #
#   make cleanall   Clean all build output, including gmock.                  #
#                                                                             #
###############################################################################

#---------- Basic settings  ----------#
PROGRAM_NAME := example
SOURCE_BASE  := src
BUILD_BASE   := build
BINARY_BASE  := $(BUILD_BASE)

#---------- Unit tests ----------#
TEST_SUFFIX  := Test
TEST_EXCLUDE := main
GTEST_URL    := git@github.com:google/googletest.git
GTEST_BASE   := googletest/googletest
GMOCK_BASE   := googletest/googlemock

#---------- Compilation and linking ----------#
CXX        := g++
SRC_EXTS   := .cc .cpp .cxx .c++ .c
CXX_LANG   := -std=c++11
CXX_WARN   := -pedantic -Wall -Wextra -Wcast-align -Wcast-qual \
              -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op \
              -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept \
              -Woverloaded-virtual -Wredundant-decls \
              -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 \
              -Wswitch-default -Wshadow \
              #-Wsign-conversion -Wundef -Wold-style-cast -Wctor-dtor-privacy
CXX_OPT    := -O3 -march=native -g -pipe
CXX_COMP   := #-fdiagnostics-color=auto -pipe #-Wfatal-errors
INC_DIRS   := -I$(SOURCE_BASE)
LINK_FLAGS := -lm -lpthread


#---------- No need to modify below ----------#

OPTS     := $(CXX_LANG) $(CXX_WARN) $(CXX_OPT) $(CXX_COMP)
SRC_DIRS := $(shell find $(SOURCE_BASE) -type d -print)
BLD_DIRS := $(addprefix $(BUILD_BASE)/,$(SRC_DIRS))
ALL_SRCS := $(foreach DIR,$(SRC_DIRS),$(foreach EXT,$(SRC_EXTS),$(wildcard $(DIR)/*$(EXT))))
ALL_TSTS := $(foreach EXT,$(SRC_EXTS),$(filter %$(TEST_SUFFIX)$(EXT),$(ALL_SRCS)))

# Application
APP      := $(BINARY_BASE)/$(PROGRAM_NAME)
APP_SRCS := $(filter-out $(ALL_TSTS),$(ALL_SRCS))
APP_OBJS := $(addsuffix .o,$(addprefix $(BUILD_BASE)/,$(APP_SRCS)))
APP_DEPS := $(APP_OBJS:.o=.d)

# Test infrastructure
TST      := $(BINARY_BASE)/$(PROGRAM_NAME)$(TEST_SUFFIX)
TST_UOBJ := $(addsuffix .o,$(addprefix $(BUILD_BASE)/,$(ALL_TSTS)))
TST_UDEP := $(TST_UOBJ:.o=.d)
TST_AEXC := $(foreach EXT,$(SRC_EXTS),$(filter %$(TEST_EXCLUDE)$(EXT).o,$(APP_OBJS)))
TST_AOBJ := $(filter-out $(TST_AEXC),$(APP_OBJS))

# Gtest framework
GTEST_PKG      := $(GTEST_BASE)/README.md
GTEST_INC      := $(GTEST_BASE)/include
GTEST_ALL_OBJ  := $(BUILD_BASE)/$(GTEST_BASE)/gtest-all.o

# Gmock framework
GMOCK_INC      := $(GMOCK_BASE)/include
GMOCK_MAIN_OBJ := $(BUILD_BASE)/$(GMOCK_BASE)/gmock_main.o
GMOCK_ALL_OBJ  := $(BUILD_BASE)/$(GMOCK_BASE)/gmock-all.o
GMOCK_LIB      := $(BUILD_BASE)/$(GMOCK_BASE)/gmock_main.a


.PHONY: all
all: $(APP)

.PHONY: clean
clean:
ifeq ($(SOURCE_BASE),$(BUILD_BASE))
	@rm -f $(APP_OBJS) $(APP_DEPS) $(APP) $(TST_UOBJ) $(TST_UDEP) $(TST)
else
	@rm -rf $(APP) $(TST) $(BUILD_BASE)
endif

.PHONY: cleanall
cleanall: clean
	@rm -rf $(basename $(notdir $(GTEST_URL)))

# Application

$(APP): $(APP_OBJS)
	@echo [LD] $@
	@$(CXX) $(OPTS) $(APP_OBJS) $(LINK_FLAGS) -o $(APP)

$(APP_OBJS): $(BUILD_BASE)/%.o: % | $(BLD_DIRS)
	@echo [CC] $<
	@$(CXX) $(OPTS) $(INC_DIRS) -MD -MP -c -o $@ $<

$(BLD_DIRS):
	@mkdir -p $@


# Test infrastructure

.PHONY: test
test: $(TST)
	@./$(TST)

$(TST): $(GMOCK_LIB) $(TST_UOBJ) $(TST_AOBJ) | $(BLD_DIRS)
	@echo [LD] $@
	@$(CXX) $(OPTS) -I$(GTEST_INC) -I$(GMOCK_INC) $(GMOCK_LIB) $(TST_UOBJ) $(TST_AOBJ) \
            $(LINK_FLAGS) -pthread -o $(TST)


# Gtest Infrastructure

# Gtest extracted directory
$(GTEST_PKG):
	@echo '[GTest]    $(GTEST_URL)'
	@git clone $(GTEST_URL)

# Gtest primary object file (everything but main())
$(GTEST_ALL_OBJ): $(GTEST_PKG)
	@echo '[GTest]    $@'
	@mkdir -p $(dir $@)
	@$(CXX) -isystem $(GTEST_INC) -I$(GTEST_BASE) -pthread \
     -c $(GTEST_BASE)/src/gtest-all.cc -o $@

# Rule for building unit test source files
$(TST_UOBJ): $(BUILD_BASE)/%.o: % | $(BLD_DIRS)
	@echo [CC] $<
	@$(CXX) $(OPTS) $(INC_DIRS) -I$(GTEST_INC) -I$(GMOCK_INC) -MD -MP -c -o $@ $<


# Gmock Infrastructure

# Gmock primary object file (everything but main())
$(GMOCK_ALL_OBJ): $(GTEST_PKG)
	@echo '[GMock]    $@'
	@mkdir -p $(dir $@)
	@$(CXX) -isystem $(GTEST_INC) -I$(GTEST_BASE) \
            -isystem $(GMOCK_INC) -I$(GMOCK_BASE) \
            -pthread -c $(GMOCK_BASE)/src/gmock-all.cc -o $@

# Gmock main() function which runs all tests
$(GMOCK_MAIN_OBJ): $(GTEST_PKG)
	@echo '[GMock]    $@'
	@mkdir -p $(dir $@)
	@$(CXX) -isystem $(GTEST_INC) -I$(GTEST_BASE) \
            -isystem $(GMOCK_INC) -I$(GMOCK_BASE) \
            -pthread -c $(GMOCK_BASE)/src/gmock_main.cc -o $@

.PHONY: gmock
gmock: $(GMOCK_LIB)

# The gmock library which is linked with test source objects
$(GMOCK_LIB): $(GTEST_ALL_OBJ) $(GMOCK_ALL_OBJ) $(GMOCK_MAIN_OBJ)
	@echo '[GMock]    $@'
	@ar -c -rv $@ $^


-include $(APP_DEPS) $(TST_UDEP)
